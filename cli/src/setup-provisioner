#!/bin/bash

set -eu

SCRIPT_PATH=$(readlink -f "$0")
BASEDIR=$(dirname "$SCRIPT_PATH")
INSTALLDIR="/opt/seagate/eos-prvsnr"
EES_PRVSNR_REPO_API_TAGS='http://gitlab.mero.colo.seagate.com/api/v4/projects/eos%2Fprovisioner%2Fees-prvsnr/repository/tags?order_by=updated&sort=desc'

eosnode_2_hostspec=eosnode-2
hostspec=
eosnode_2_opt=false

salt_master_hostname=
prvsnr_repo_src=rpm

prvsnr_version=

source $BASEDIR/functions.sh

function usage {
  echo "\
Usage: $0 [options] [ees-prvsnr-version]

Installs the provisioner repository along with SaltStack
on the hosts with bare OS installed, sets up passwordless
ssh configuration and configures salt master/minion connections
and also makes some additional preliminary configuration.

'ees-prvsnr-version' as an optional positional argument might specify
the desired version of the provisioner to install. Makes sense for 'gitlab'
source only as of now. Not set by default.

General options:
$base_options_usage

Options:
       --eosnode-2=[user@]hostname      eosnode-2 host specification,
                                         default: $eosnode_2_hostspec
       --repo-src={local|gitlab|gitrepo|rpm}    the source for provisioner repo installation,
                                         default: $prvsnr_repo_src
       --salt-master=HOSTNAME           domain name or IP of the salt master
                                         default: not specified
"
}

# TODO
# - dry-run support

# TODO tests
function options_parser {
    set -eu

    case "$1" in
        --eosnode-2)
            eosnode_2_hostspec="$2"
            eosnode_2_opt=true
            ;;
        --repo-src)
            case "$2" in
                local|gitlab|gitrepo|rpm)
                    prvsnr_repo_src="$2"
                    ;;
                *)
                    l_error "Incorrect repo source: $1"
                    usage
                    exit 5
            esac
            ;;
        --salt-master)
            salt_master_hostname="$2"
            ;;
        *)
            l_error "Unknown option: $1"
            exit 5
    esac
}


# TODO update tests
function positional_args_parser {
    set -eu

    if [[ $# -gt 1 ]]; then
        l_error "$0: Only one positional argument is expected, provided: $@"
        exit 2
    fi

    prvsnr_version="${1:-}"
}


parse_args '' 'eosnode-2:,repo-src:,salt-master:' options_parser positional_args_parser "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

# -F and --eosnode-2 options shouldn't be provided together
if [[ -n "$ssh_config" && $eosnode_2_opt == true ]]; then
    l_error "$0: -F and --eosnode-2 options are mutually exclusive"
    exit 1
fi

if [[ -n "$ssh_config" ]]; then
    default_ssh_disabled=true
else
    if [[ $eosnode_2_opt == false ]]; then
        l_error "$0: Please provide node 2 details using --eosnode-2 option"
        l_error "OR use -F option to provide ssh config file"
        exit 1
    fi
    setup_ssh
    ssh_config="$default_ssh_conf"
fi

# CHECK EOSNODE-1/EOSNODE-2 OCCURENCE IN SSH-CONFIG
if [[ -n "$hostspec" && $default_ssh_disabled == true ]]; then
    if [[ -z "$ssh_config" || -z "$(check_host_in_ssh_config "$hostspec" "$ssh_config" 2>/dev/null)" ]]; then
        l_error "Invalid ssh configuration provided for eosnode-1 in ssh-config ($ssh_config)"
        exit 1
    fi
fi
if [[ "$singlenode" == false && $default_ssh_disabled == true ]]; then
    if [[ -z "$ssh_config" || -z "$(check_host_in_ssh_config "$eosnode_2_hostspec" "$ssh_config" 2>/dev/null)" ]]; then
        l_error "Invalid ssh configuration provided for eosnode-2 in ssh-config ($ssh_config)"
        exit 1
    fi
fi

if [[ -z "$prvsnr_version" ]]; then
    if [[ "$prvsnr_repo_src" == "gitlab" ]]; then
        # get latest version of provisioner
        ! _tags=$(curl "$EES_PRVSNR_REPO_API_TAGS")
        prvsnr_version=$(echo "$_tags" | tr ',' '\n' | sed -n 's/.*"name":"\(.\+\)".*/\1/p' | head -n1)
    fi
fi

# TODO rpm case for now doesn't support selection per version, only latest one
if [[ -z "$prvsnr_version" && "$prvsnr_repo_src" != "local" && "$prvsnr_repo_src" != "rpm" ]]; then
    l_error 'provisioner repo version is unknown'
    exit 1
fi


if [[ -z "$salt_master_hostname" && "$singlenode" != true ]]; then
    l_info 'trying to auto-detect salt master host for eosnode-2'
    _reachable_names="$(get_reachable_host_names "$hostspec" "$eosnode_2_hostspec" "$ssh_config")"

    if [[ -z "$_reachable_names" ]]; then
        l_warn "reachable salt master hostname hasn't been detected"
    else
        _reachable_names_arr=
        read -r -a _reachable_names_arr <<< "$_reachable_names"
        salt_master_hostname="${_reachable_names_arr[0]}"
        l_info "salt master hostname set as $salt_master_hostname"
    fi
fi

# SETUP EOSNODE-1
install_repos "$hostspec" "$ssh_config" "$sudo"

configure_firewall "$hostspec" "$ssh_config" "$sudo"

install_salt "$hostspec" "$ssh_config" "$sudo"

configure_salt eosnode-1 "$hostspec" "$ssh_config" "$sudo" true localhost "$INSTALLDIR"

accept_salt_key eosnode-1 "$hostspec" "$ssh_config" "$sudo"

install_provisioner "$prvsnr_repo_src" "$prvsnr_version" "$hostspec" "$ssh_config" "$sudo" "$singlenode" "$INSTALLDIR"

# configure_multipath eosnode-1 "$hostspec" "$ssh_config" "$sudo" true

# TODO use salt formulas instead
# disabled, http://gitlab.mero.colo.seagate.com/eos/provisioner/ees-prvsnr/issues/21
# configure_network "$hostspec" "$ssh_config" "$sudo" "$INSTALLDIR"


# SETUP EOSNODE-2
if [[ "$singlenode" != true ]]; then
    install_repos "$eosnode_2_hostspec" "$ssh_config" "$sudo"

    configure_firewall "$eosnode_2_hostspec" "$ssh_config" "$sudo"

    install_salt "$eosnode_2_hostspec" "$ssh_config" "$sudo"

    configure_salt eosnode-2 "$eosnode_2_hostspec" "$ssh_config" "$sudo" false "$salt_master_hostname" "$INSTALLDIR"
    
    # Always use master hostspec to execute this step
    accept_salt_key eosnode-2 "$hostspec" "$ssh_config" "$sudo"

    install_provisioner "$prvsnr_repo_src" "$prvsnr_version" "$eosnode_2_hostspec" "$ssh_config" "$sudo" "$singlenode" "$INSTALLDIR"

    # configure_multipath eosnode-2 "$eosnode_2_hostspec" "$ssh_config" "$sudo" false

    # TODO use salt formulas instead
    # disabled, http://gitlab.mero.colo.seagate.com/eos/provisioner/ees-prvsnr/issues/21
    # configure_network "$eosnode_2_hostspec" "$ssh_config" "$sudo" "$INSTALLDIR"
fi

#update hostname in cluster.sls
if [[ -n "$eosnode_1_hostname" && -n "$eosnode_2_hostname" ]]; then
    l_info "Updating hostnames in cluster pillar"
    update_cluster_pillar_hostname "eosnode-1" "$eosnode_1_hostname"
    update_cluster_pillar_hostname "eosnode-2" "$eosnode_2_hostname"
fi

#update target_build in release.sls
if [[ -n "$prvsnr_version" ]]; then
    l_info "Updating target build in release pillar"
    update_release_pillar $prvsnr_version
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"
target_minions='*'
if [[ -n "$hostspec" ]]; then
    target_minions="'*'"
fi

# TODO test that
if [[ "$singlenode" != true ]]; then
    l_info "Triggering salt data mining"
    # force salt to mine data
    $cmd salt "$target_minions" mine.update
fi

#TODO: Setup ssh passwordless configuration even when -F option is provided
# if -F option is used, setup passwordless ssh at the end.
#if [[ "$default_ssh_disabled" = "true" ]]; then
    #TODO: Update default ssh config file from user provided config file
    #eosnode_1_hostspec=eosnode-1
    #if [[ -z "$(check_hostname_in_ssh_config "$eosnode_1_hostspec" "$ssh_config" 2>/dev/null)" ]]; then
    #    l_error "Invalid ssh configuration provided for eosnode-1 in ssh-config ($ssh_config)"
    #    exit 1
    #fi
    #if [[ -z "$(check_hostname_in_ssh_config "$eosnode_2_hostspec" "$ssh_config" 2>/dev/null)" ]]; then
    #    l_error "Invalid ssh configuration provided for eosnode-2 in ssh-config ($ssh_config)"
    #    exit 1
    #fi
    #ssh_setup
#fi

l_info "Done"
