#!/bin/bash

set -eu

function usage {
  echo "\
Usage: $0 [options] [[user@]hostname]

Installs EOS stack and configures eos services either on remote host or locally
if hostname is not specified.

Options:
    -F,  --ssh-config FILE  alternative path to ssh configuration file
    -n,  --dry-run          do not actually perform any changes
"
}

function parse_args() {
    set -eu

    # Note. this mostly based on https://stackoverflow.com/a/29754866

    ! getopt --test > /dev/null
    if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
        echo 'Error: getopt is not functional (`getopt --test` failed).'
        exit 1
    fi

    OPTIONS=hF:n
    LONGOPTS=help,ssh-config:,dry-run

    ! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
    if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
        exit 2
    fi

    eval set -- "$PARSED"

    while true; do
        case "$1" in
            -h|--help)
                usage
                exit 0
                ;;
            -F|--ssh-config)
                ssh_config="$2"
                if [[ ! -f "$ssh_config" ]]; then
                    echo "'$ssh_config' not a file"
                    exit 2
                fi
                shift 2
                ;;
            -n|--dry-run)
                dry_run=True
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                echo "Programming error"
                exit 3
                ;;
        esac
    done

    if [[ $# -eq 1 ]]; then
        host=$1
    elif [[ $# -ne 0 ]]; then
        echo "$0: Only a single remote host is expected, provided: $@"
        exit 4
    fi

}

# parse args
host= ssh_config= dry_run=False
parse_args "$@"
echo "host: $host, ssh_config: $ssh_config, dry-run: $dry_run"

# set ssh options
ssh=
if [[ -n "$host" ]]; then

    if [[ -n "$ssh_config" ]]; then
        ssh_config="-F $ssh_config"
    fi

    ssh="ssh $ssh_config $host"
fi

# resolve salt states to apply
states=$($ssh salt-call --local state.show_top | grep components | awk '{print $NF}')

if [ -z "$states" ]; then
    >&2 echo 'No states found in salt formulas'
    exit 1
fi

# apply states
for state in $states; do
    echo "Applying '$state'..."
    $ssh salt-call --local state.apply "$state" test="$dry_run"
done

echo "Done"
