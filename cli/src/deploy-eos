#!/bin/bash

set -eu

SCRIPT_PATH=$(readlink -f "$0")
BASEDIR=$(dirname "$SCRIPT_PATH")

. $BASEDIR/functions.sh

run_all=true
prereq_states=false
io_states=false
ha_states=false
ctrlpath_states=false

prereq_states=(
    # states to be applied in desired sequence
        "system.storage.multipath"
        "system.network"
        "system.network.data.direct"
        "system"
        "misc_pkgs.rsyslog"
        "system.firewall"
        "system.logrotate"
        "system.ntp"
        "system.storage"
        "misc_pkgs.ssl_certs"
        "ha.haproxy"
        "misc_pkgs.elasticsearch"
        "misc_pkgs.kibana"
        "misc_pkgs.nodejs"
        "misc_pkgs.openldap"
        "misc_pkgs.rabbitmq"
        "misc_pkgs.statsd"
    )

iopath_states=(
    # states to be applied in desired sequence
        "misc_pkgs.lustre"
        "eoscore"
        "s3server"
        "hare"
    )

ha_states=(
    # states to be applied in desired sequence
        "ha.corosync-pacemaker"
        "ha.ees_ha"
    )

controlpath_states=(
    # states to be applied in desired sequence
        "sspl"
        "csm"
    )

function usage {
  echo "\
Usage: $0 [options]

Installs EOS stack and configures eos services either on remote host or locally.

Target host is considered to be an EOS SaltStack master.

General options:
$base_options_usage
Options:
       -S,  --singlenode               switch to single node mode setup
       --prereq-states             deploy only prereq states (components.misc_pkgs)
       --iopath-states             deploy only iopath states (eoscore, s3server & Hare)
       --ha-states                 deploy only ha states (corosync-pacemaker, ees_ha)
       --ctrlpath-states           deploy only control path states (sspl & csm)
"
}


function options_parser {
    set -eu

    case "$1" in
        -S|--singlenode)
            singlenode=true
            ;;
        --prereq-states)
            prereq_states=true
            run_all=false
            ;;
        --iopath-states)
            io_states=true
            run_all=false
            ;;
        --ha-states)
            ha_states=true
            run_all=false
            ;;
        --ctrlpath-states)
            ctrlpath_states=true
            run_all=false
            ;;
        *)
            l_error "Unknown option: $1"
            usage
            exit 5
    esac
}

function run_states {
    local states=${@}

    # apply states
    if [[ "$singlenode" == true ]]; then
        # TODO use salt orchestration
        for state in ${states[@]}; do
            l_info "Applying 'components.$state'"
            $cmd salt eosnode-1 state.apply components.$state $salt_opts
            sleep 2     # Mindfulness break
        done
    else
        for state in ${states[@]}; do
            if [[ "$state" == "ha.corosync-pacemaker" || "$state" == "sspl" ]]; then
                # Execute first on eosnode-2 then on eosnode-1.
                l_info "Applying 'components.$state' for eosnode-2"
                $cmd salt eosnode-2 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
                l_info "Applying 'components.$state' for eosnode-1"
                $cmd salt eosnode-1 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
            elif [[ "$state" == "misc_pkgs.openldap" || "$state" == "misc_pkgs.rabbitmq" ]]; then
                # Execute first on eosnode-1 then on eosnode-2.
                l_info "Applying 'components.$state' for eosnode-1"
                $cmd salt eosnode-1 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
                l_info "Applying 'components.$state' for eosnode-2"
                $cmd salt eosnode-2 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
            else
                l_info "Applying 'components.$state' for both nodes"
                $cmd salt eosnode-[1,2] state.apply components.$state $salt_opts
                sleep 2     # Mindfulness break
            fi
        done
    fi
}


parse_args 'S' 'singlenode,prereq-states,iopath-states,ha-states,ctrlpath-states' options_parser '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
if [[ "$dry_run" == true ]]; then
    salt_opts="test=True"
fi

# Refresh salt pillar data
l_info "Updating salt pillar data"
$cmd salt "*" saltutil.sync_all
$cmd salt "*" saltutil.refresh_pillar
$cmd salt "*" saltutil.refresh_grains


if [[ "$run_all" == true ]]; then
    run_states "${prereq_states[@]}"
    run_states  "${iopath_states[@]}"
    run_states "${ha_states[@]}"
    run_states "${controlpath_states[@]}"
fi

if [[ "$prereq_states" == true ]]; then
    l_info "Deploying the prereq states"
    run_states  "${prereq_states[@]}"
fi

if [[ "$io_states" == true ]]; then
    l_info "Deploying the io path states"
    run_states  "${iopath_states[@]}"
fi

if [[ "$ha_states" == true ]]; then
    l_info "Deploying the ha states"
    run_states "${ha_states[@]}"
fi

if [[ "$ctrlpath_states" == true ]]; then
    l_info "Deploying the control path states"
    run_states "${controlpath_states[@]}"
fi

l_info "Done"
