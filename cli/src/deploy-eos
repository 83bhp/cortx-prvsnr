#!/bin/bash

set -eu

SCRIPT_PATH=$(readlink -f "$0")
BASEDIR=$(dirname "$SCRIPT_PATH")

. $BASEDIR/functions.sh

function usage {
  echo "\
Usage: $0 [options]

Installs EOS stack and configures eos services either on remote host or locally.

Target host is considered to be an EOS SaltStack master.

General options:
$base_options_usage
"
}

parse_args '' '' '' '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
if [[ "$dry_run" == true ]]; then
    salt_opts="test=True"
fi

# apply states
if [[ "$singlenode" == true ]]; then
    # TODO use salt orchestration
    for state in system ha.haproxy misc_pkgs.openldap misc_pkgs.build_ssl_cert_rpms eoscore s3server hare sspl csm; do
        l_info "Applying 'components.$state' for both nodes"
        $cmd salt eosnode-1 state.apply components.$state $salt_opts
    done
else
    # TODO use salt orchestration
    for state in system ha.haproxy misc_pkgs.openldap; do
        l_info "Applying 'components.$state' for both nodes"
        $cmd salt eosnode-[1,2] state.apply components.$state $salt_opts
    done

    # Execute on eosnode-2 only if cert generation on eosnode-1 succeeds.
    l_info "Applying 'components.misc_pkgs.build_ssl_cert_rpms' for eosnode-1"
    $cmd salt eosnode-1 state.apply components.misc_pkgs.build_ssl_cert_rpms $salt_opts

    l_info "Applying 'components.misc_pkgs.build_ssl_cert_rpms' for eosnode-2"
    $cmd salt eosnode-2 state.apply components.misc_pkgs.build_ssl_cert_rpms $salt_opts

    for state in  eoscore s3server hare sspl csm; do
        l_info "Applying 'components.$state' for both nodes"
        $cmd salt eosnode-[1,2] state.apply components.$state $salt_opts
    done
fi

l_info "Done"
