#!/bin/bash

set -eu

SCRIPT_PATH=$(readlink -f "$0")
BASEDIR=$(dirname "$SCRIPT_PATH")

. $BASEDIR/functions.sh

function usage {
  echo "\
Usage: $0 [options]

Installs EOS stack and configures eos services either on remote host or locally.

Target host is considered to be an EOS SaltStack master.

General options:
$base_options_usage
"
}

parse_args '' '' '' '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
if [[ "$dry_run" == true ]]; then
    salt_opts="test=True"
fi

# Refresh salt pillar data
l_info "Updating salt pillar data"
$cmd salt "*" saltutil.refresh_pillar

states=(
# states to be applied in desired sequence
    "system"
    "system.storage"
    "misc_pkgs.build_ssl_cert_rpms"
    "ha.corosync-pacemaker"
    "misc_pkgs.rsyslog"
    "ha.haproxy"
    "misc_pkgs.elasticsearch"
    "misc_pkgs.kibana"
    "misc_pkgs.nodejs"
    "misc_pkgs.openldap"
    "misc_pkgs.rabbitmq"
    "misc_pkgs.statsd"
    "misc_pkgs.lustre"
    "eoscore"
    "s3server"
    "hare"
    "sspl"
    "csm"
)
# apply states
if [[ "$singlenode" == true ]]; then
    # TODO use salt orchestration
    for state in "${states[@]}"; do
        l_info "Applying 'components.$state'"
        $cmd salt eosnode-1 state.apply components.$state $salt_opts
    done
else
    for state in "${states[@]}"; do
	if [[ "$state" == "ha.corosync-pacemaker" ]]; then
            # TODO: Remove this sequence dependency
            #       Take the cluster start part out of the component config
	    #       and do it as part of bootstra-eos script similar to the
	    #       'hctl bootstrap' command

	    # Execute on eosnode-2 to be followed on eosnode-1.
	    l_info "Applying 'components.$state' for eosnode-2"
	    $cmd salt eosnode-2 state.apply components.$state  $salt_opts
	    l_info "Applying 'components.$state' for eosnode-1"
	    $cmd salt eosnode-1 state.apply components.$state  $salt_opts
        else
            l_info "Applying 'components.$state' for both nodes"
            $cmd salt eosnode-[1,2] state.apply components.$state $salt_opts
	fi
    done

    # EES ha provisioning
    #l_info "Provision EES HA cluster"
    #for state in ees_ha; do
    #    l_info "Applying 'components.$state' for both nodes"
    #    $cmd salt eosnode-[1,2] state.apply components.$state $salt_opts
    #done
fi

l_info "Done"
