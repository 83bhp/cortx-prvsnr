#!/bin/bash

set -eu

function usage {
  echo "\
Usage: $0 [--local|--remote [user@]hostname] [--ssh-config FILE] [--dry-run]

Installs EOS stack and configures eos services locally.

Options:
    --local                     run locally (default)
    --remote [user@]hostname    run remotely on specified host
    --ssh-config FILE           alternative path to ssh configuration file
    --dry-run                   do not actually perform any changes
"
}

function parse_args() {
    set -eu

    ! getopt --test > /dev/null
    if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
        echo 'Error: getopt is not functional (`getopt --test` failed).'
        exit 1
    fi

    OPTIONS=hlr:F:n
    LONGOPTS=help,local,remote:,ssh-config:,dry-run

    ! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
    if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
        exit 2
    fi
    # read getoptâ€™s output this way to handle the quoting right:
    eval set -- "$PARSED"

    while true; do
        case "$1" in
            -h|--help)
                usage
                exit 0
                ;;
            -l|--local)
                mode=local
                shift
                ;;
            -r|--remote)
                mode=remote
                host="$2"
                shift 2
                ;;
            -F|--ssh-config)
                ssh_config="$2"
                if [[ ! -f "$ssh_config" ]]; then
                    echo "'$ssh_config' not a file"
                    exit 2
                fi
                shift 2
                ;;
            -n|--dry-run)
                test_mode=True
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                echo "Programming error"
                exit 3
                ;;
        esac
    done

    if [[ $# -ne 0 ]]; then
        echo "$0: Unexpected arguments: $@"
        exit 4
    fi

}

mode=local host= ssh_config= test_mode=False
parse_args "$@"
echo "mode: $mode, host: $host, ssh_config: $ssh_config, dry-run: $test_mode"

ssh=
if [[ "$mode" == "remote" ]]; then

    if [[ -n "$ssh_config" ]]; then
        ssh_config="-F $ssh_config"
    fi

    ssh="ssh $ssh_config $host"
fi

components=$($ssh salt-call --local state.show_top | grep components | awk '{print $NF}')

if [ -z "$components" ]; then
    >&2 echo 'No eos components found in salt formulas'
    exit 1
fi

for component in $components; do
    echo "Applying '$component'..."
    $ssh salt-call --local state.apply "$component" test="$test_mode"
done

echo "Done"
